{"version":3,"sources":["webpack:///./src/pages/blog.js","webpack:///./src/components/seo.js"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","gatsby__WEBPACK_IMPORTED_MODULE_1__","gatsby_image__WEBPACK_IMPORTED_MODULE_2__","gatsby_image__WEBPACK_IMPORTED_MODULE_2___default","_components_bloglayout__WEBPACK_IMPORTED_MODULE_3__","_components_seo__WEBPACK_IMPORTED_MODULE_4__","_styles_blog_module_sass__WEBPACK_IMPORTED_MODULE_5__","_styles_blog_module_sass__WEBPACK_IMPORTED_MODULE_5___default","Blog","_ref","blogposts","data","a","createElement","title","edges","map","_ref2","node","className","styles","blogPost","key","contentful_id","to","slug","fluid","heroImage","srcSetWebp","postWrapper","author","name","publishDate","blogPostContent","dangerouslySetInnerHTML","__html","body","childMarkdownRemark","excerpt","SEO","description","lang","meta","keywords","react__WEBPACK_IMPORTED_MODULE_1___default","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","render","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAAO,EAAAE,GAAAE,EAAAX,EAAA,KAAAY,EAAAZ,EAAA,KAAAa,EAAAb,EAAA,KAAAc,EAAAd,EAAAO,EAAAM,GAkCeE,UA1BF,SAAAC,GAAc,IACjBC,EADiBD,EAAXE,KACND,UAER,OACEX,EAAAa,EAAAC,cAACT,EAAA,EAAD,KACEL,EAAAa,EAAAC,cAACR,EAAA,EAAD,CAAKS,MAAM,SACXf,EAAAa,EAAAC,cAAA,+BACAd,EAAAa,EAAAC,cAAA,WACGH,EAAUK,OAASL,EAAUK,MAAMC,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACtCnB,EAAAa,EAAAC,cAAA,OAAKM,UAAWC,IAAOC,SAAUC,IAAKJ,EAAKK,eACzCxB,EAAAa,EAAAC,cAACZ,EAAA,KAAD,CAAMuB,GAAIN,EAAKO,MACb1B,EAAAa,EAAAC,cAACV,EAAAS,EAAD,CAAKc,MAAOR,EAAKS,UAAUD,MAAOE,WAAYV,EAAKS,UAAUD,MAAME,cAErE7B,EAAAa,EAAAC,cAAA,OAAKM,UAAWC,IAAOS,aACrB9B,EAAAa,EAAAC,cAACZ,EAAA,KAAD,CAAMuB,GAAIN,EAAKO,MAAM1B,EAAAa,EAAAC,cAAA,UAAKK,EAAKJ,QAC/Bf,EAAAa,EAAAC,cAAA,iBAASK,EAAKY,OAAOC,MACrBhC,EAAAa,EAAAC,cAAA,wBAAgBK,EAAKc,aACrBjC,EAAAa,EAAAC,cAAA,OAAKM,UAAWC,IAAOa,gBAAiBC,wBAAyB,CAAEC,OAAQjB,EAAKkB,KAAKC,oBAAoBC,kBAWhH,IAAMzC,EAAK,uHC/BlB,SAAS0C,EAAT9B,GAA2D,IAA5C+B,EAA4C/B,EAA5C+B,YAAaC,EAA+BhC,EAA/BgC,KAAMC,EAAyBjC,EAAzBiC,KAAMC,EAAmBlC,EAAnBkC,SAAU7B,EAASL,EAATK,MAChD,OACE8B,EAAAhC,EAAAC,cAACgC,EAAA,YAAD,CACEhD,MAAOiD,EACPC,OAAQ,SAAApC,GACN,IAAMqC,EACJR,GAAe7B,EAAKsC,KAAKC,aAAaV,YACxC,OACEI,EAAAhC,EAAAC,cAACsC,EAAAvC,EAAD,CACEwC,eAAgB,CACdX,QAEF3B,MAAOA,EACPuC,cAAa,QAAU1C,EAAKsC,KAAKC,aAAapC,MAC9C4B,KAAM,CACJ,CACEX,KAAI,cACJuB,QAASN,GAEX,CACEO,SAAQ,WACRD,QAASxC,GAEX,CACEyC,SAAQ,iBACRD,QAASN,GAEX,CACEO,SAAQ,UACRD,QAAO,WAET,CACEvB,KAAI,eACJuB,QAAO,WAET,CACEvB,KAAI,kBACJuB,QAAS3C,EAAKsC,KAAKC,aAAapB,QAElC,CACEC,KAAI,gBACJuB,QAASxC,GAEX,CACEiB,KAAI,sBACJuB,QAASN,IAGVQ,OACCb,EAASc,OAAS,EACd,CACE1B,KAAI,WACJuB,QAASX,EAASe,KAAT,OAEX,IAELF,OAAOd,MAtDlB/B,KAAAgD,IA8DJpB,EAAIqB,aAAe,CACjBnB,KAAI,KACJC,KAAM,GACNC,SAAU,IAGZJ,EAAIsB,UAAY,CACdrB,YAAasB,IAAUC,OACvBtB,KAAMqB,IAAUC,OAChBrB,KAAMoB,IAAUE,MAChBrB,SAAUmB,IAAUG,QAAQH,IAAUC,QACtCjD,MAAOgD,IAAUC,OAAOG,YAGX3B,MAEf,IAAMO,EAAY","file":"component---src-pages-blog-js-099703e0a213bb35eb75.js","sourcesContent":["import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport BlogLayout from '../components/bloglayout'\nimport SEO from '../components/seo'\nimport styles from '../styles/blog.module.sass'\n\n\nconst Blog = ({ data }) => {\n  const { blogposts } = data\n\n  return (\n    <BlogLayout>\n      <SEO title=\"Blog\" />\n      <h1>Recent Blog Posts</h1>\n      <div>\n        {blogposts.edges && blogposts.edges.map(({ node }) => (\n          <div className={styles.blogPost} key={node.contentful_id}>\n            <Link to={node.slug}>\n              <Img fluid={node.heroImage.fluid} srcSetWebp={node.heroImage.fluid.srcSetWebp} />\n            </Link>\n            <div className={styles.postWrapper}>\n              <Link to={node.slug}><h1>{node.title}</h1></Link>\n              <h4>By: {node.author.name}</h4>\n              <h4>Published: {node.publishDate}</h4>\n              <div className={styles.blogPostContent} dangerouslySetInnerHTML={{ __html: node.body.childMarkdownRemark.excerpt }}></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </BlogLayout>\n  )\n}\n\nexport default Blog\n\nexport const query = graphql`\nquery {\n  me: contentfulPerson(name: { eq: \"Joel AA\"}) {\n    contentful_id\n    name\n    title\n    email\n    github\n    shortBio {\n      shortBio\n      childMarkdownRemark {\n        html\n      }\n    }\n    image {\n      fluid(maxWidth: 700) {\n        src\n        srcSet\n        srcSetWebp\n        aspectRatio\n        tracedSVG\n        ...GatsbyContentfulFluid_withWebp\n      }\n    }\n  }\n  blogposts: allContentfulBlogPost(limit: 3, sort: { fields: publishDate, order: DESC }) {\n    edges {\n      node {\n\t\t\t\tcontentful_id\n        slug\n        title\n        publishDate(formatString: \"MMMM DD, YYYY\")\n        createdAt\n        updatedAt\n        tags\n        heroImage {\n          id\n          fluid(maxHeight: 700, ) {\n            src\n            srcSet\n            srcSetWebp\n            aspectRatio\n            sizes\n          }\n        }\n        author {\n          contentful_id\n          name\n          company\n          title\n          email\n          phone\n          facebook\n          twitter\n          github\n          image {\n            fluid(maxWidth: 200) {\n              src\n              srcSet\n              srcSetWebp\n              aspectRatio\n              sizes\n            }\n          }\n          avatar {\n            fluid(maxWidth: 200) {\n              srcSetWebp\n            }\n          }\n          shortBio {\n            childMarkdownRemark {\n              html\n            }\n          }\n        }\n        description {\n          childMarkdownRemark {\n            excerpt\n            html\n          }\n        }\n        body {\n          childMarkdownRemark {\n            html\n            excerpt\n          }\n        }\n      }\n    }\n  }\n}\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}