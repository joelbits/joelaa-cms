{"version":3,"sources":["webpack:///./src/pages/blog.js","webpack:///./src/components/seo.js"],"names":["Blog","_ref","blogposts","data","react__WEBPACK_IMPORTED_MODULE_1___default","a","createElement","_components_bloglayout__WEBPACK_IMPORTED_MODULE_4__","_components_seo__WEBPACK_IMPORTED_MODULE_5__","title","edges","map","_ref2","node","className","styles","blogPost","key","contentful_id","gatsby__WEBPACK_IMPORTED_MODULE_2__","to","slug","gatsby_image__WEBPACK_IMPORTED_MODULE_3___default","fluid","heroImage","srcSetWebp","postWrapper","author","name","publishDate","blogPostContent","dangerouslySetInnerHTML","__html","body","childMarkdownRemark","excerpt","query","SEO","description","lang","meta","keywords","gatsby__WEBPACK_IMPORTED_MODULE_4__","detailsQuery","render","metaDescription","site","siteMetadata","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","concat","length","join","_public_static_d_1025518380_json__WEBPACK_IMPORTED_MODULE_0__","defaultProps","propTypes","PropTypes","string","array","arrayOf","isRequired"],"mappings":"+NAkCeA,UA1BF,SAAAC,GAAc,IACjBC,EADiBD,EAAXE,KACND,UAER,OACEE,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,MAAM,SACXL,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAAA,WACGJ,EAAUQ,OAASR,EAAUQ,MAAMC,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,KAAH,OACtCT,EAAAC,EAAAC,cAAA,OAAKQ,UAAWC,IAAOC,SAAUC,IAAKJ,EAAKK,eACzCd,EAAAC,EAAAC,cAACa,EAAA,KAAD,CAAMC,GAAIP,EAAKQ,MACbjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAKkB,MAAOV,EAAKW,UAAUD,MAAOE,WAAYZ,EAAKW,UAAUD,MAAME,cAErErB,EAAAC,EAAAC,cAAA,OAAKQ,UAAWC,IAAOW,aACrBtB,EAAAC,EAAAC,cAACa,EAAA,KAAD,CAAMC,GAAIP,EAAKQ,MAAMjB,EAAAC,EAAAC,cAAA,UAAKO,EAAKJ,QAC/BL,EAAAC,EAAAC,cAAA,iBAASO,EAAKc,OAAOC,MACrBxB,EAAAC,EAAAC,cAAA,wBAAgBO,EAAKgB,aACrBzB,EAAAC,EAAAC,cAAA,OAAKQ,UAAWC,IAAOe,gBAAiBC,wBAAyB,CAAEC,OAAQnB,EAAKoB,KAAKC,oBAAoBC,kBAWhH,IAAMC,EAAK,uHC/BlB,SAASC,EAATpC,GAA2D,IAA5CqC,EAA4CrC,EAA5CqC,YAAaC,EAA+BtC,EAA/BsC,KAAMC,EAAyBvC,EAAzBuC,KAAMC,EAAmBxC,EAAnBwC,SAAUhC,EAASR,EAATQ,MAChD,OACEL,EAAAC,EAAAC,cAACoC,EAAA,YAAD,CACEN,MAAOO,EACPC,OAAQ,SAAAzC,GACN,IAAM0C,EACJP,GAAenC,EAAK2C,KAAKC,aAAaT,YACxC,OACElC,EAAAC,EAAAC,cAAC0C,EAAA3C,EAAD,CACE4C,eAAgB,CACdV,QAEF9B,MAAOA,EACPyC,cAAa,QAAU/C,EAAK2C,KAAKC,aAAatC,MAC9C+B,KAAM,CACJ,CACEZ,KAAI,cACJuB,QAASN,GAEX,CACEO,SAAQ,WACRD,QAAS1C,GAEX,CACE2C,SAAQ,iBACRD,QAASN,GAEX,CACEO,SAAQ,UACRD,QAAO,WAET,CACEvB,KAAI,eACJuB,QAAO,WAET,CACEvB,KAAI,kBACJuB,QAAShD,EAAK2C,KAAKC,aAAapB,QAElC,CACEC,KAAI,gBACJuB,QAAS1C,GAEX,CACEmB,KAAI,sBACJuB,QAASN,IAGVQ,OACCZ,EAASa,OAAS,EACd,CACE1B,KAAI,WACJuB,QAASV,EAASc,KAAT,OAEX,IAELF,OAAOb,MAtDlBrC,KAAAqD,IA8DJnB,EAAIoB,aAAe,CACjBlB,KAAI,KACJC,KAAM,GACNC,SAAU,IAGZJ,EAAIqB,UAAY,CACdpB,YAAaqB,IAAUC,OACvBrB,KAAMoB,IAAUC,OAChBpB,KAAMmB,IAAUE,MAChBpB,SAAUkB,IAAUG,QAAQH,IAAUC,QACtCnD,MAAOkD,IAAUC,OAAOG,YAGX1B,MAEf,IAAMM,EAAY","file":"component---src-pages-blog-js-7eeb6e16889ba5a36a15.js","sourcesContent":["import React from 'react'\nimport { graphql, Link } from 'gatsby'\nimport Img from 'gatsby-image'\nimport BlogLayout from '../components/bloglayout'\nimport SEO from '../components/seo'\nimport styles from '../styles/blog.module.sass'\n\n\nconst Blog = ({ data }) => {\n  const { blogposts } = data\n\n  return (\n    <BlogLayout>\n      <SEO title=\"Blog\" />\n      <h1>Recent Blog Posts</h1>\n      <div>\n        {blogposts.edges && blogposts.edges.map(({ node }) => (\n          <div className={styles.blogPost} key={node.contentful_id}>\n            <Link to={node.slug}>\n              <Img fluid={node.heroImage.fluid} srcSetWebp={node.heroImage.fluid.srcSetWebp} />\n            </Link>\n            <div className={styles.postWrapper}>\n              <Link to={node.slug}><h1>{node.title}</h1></Link>\n              <h4>By: {node.author.name}</h4>\n              <h4>Published: {node.publishDate}</h4>\n              <div className={styles.blogPostContent} dangerouslySetInnerHTML={{ __html: node.body.childMarkdownRemark.excerpt }}></div>\n            </div>\n          </div>\n        ))}\n      </div>\n    </BlogLayout>\n  )\n}\n\nexport default Blog\n\nexport const query = graphql`\nquery {\n  me: contentfulPerson(name: { eq: \"Joel AA\"}) {\n    contentful_id\n    name\n    title\n    email\n    github\n    shortBio {\n      shortBio\n      childMarkdownRemark {\n        html\n      }\n    }\n    image {\n      fluid(maxWidth: 700) {\n        src\n        srcSet\n        srcSetWebp\n        aspectRatio\n        tracedSVG\n        ...GatsbyContentfulFluid_withWebp\n      }\n    }\n  }\n  blogposts: allContentfulBlogPost(limit: 3, sort: { fields: publishDate, order: DESC }) {\n    edges {\n      node {\n\t\t\t\tcontentful_id\n        slug\n        title\n        publishDate(formatString: \"MMMM DD, YYYY\")\n        createdAt\n        updatedAt\n        heroImage {\n          id\n          fluid(maxHeight: 700, ) {\n            src\n            srcSet\n            srcSetWebp\n            aspectRatio\n            sizes\n          }\n        }\n        author {\n          contentful_id\n          name\n          company\n          title\n          email\n          phone\n          facebook\n          twitter\n          github\n          image {\n            fluid(maxWidth: 200) {\n              src\n              srcSet\n              srcSetWebp\n              aspectRatio\n              sizes\n            }\n          }\n          avatar {\n            fluid(maxWidth: 200) {\n              srcSetWebp\n            }\n          }\n          shortBio {\n            childMarkdownRemark {\n              html\n            }\n          }\n        }\n        description {\n          childMarkdownRemark {\n            excerpt\n            html\n          }\n        }\n        body {\n          childMarkdownRemark {\n            html\n            excerpt\n          }\n        }\n      }\n    }\n  }\n}\n`\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport Helmet from 'react-helmet'\nimport { StaticQuery, graphql } from 'gatsby'\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  return (\n    <StaticQuery\n      query={detailsQuery}\n      render={data => {\n        const metaDescription =\n          description || data.site.siteMetadata.description\n        return (\n          <Helmet\n            htmlAttributes={{\n              lang,\n            }}\n            title={title}\n            titleTemplate={`%s | ${data.site.siteMetadata.title}`}\n            meta={[\n              {\n                name: `description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:title`,\n                content: title,\n              },\n              {\n                property: `og:description`,\n                content: metaDescription,\n              },\n              {\n                property: `og:type`,\n                content: `website`,\n              },\n              {\n                name: `twitter:card`,\n                content: `summary`,\n              },\n              {\n                name: `twitter:creator`,\n                content: data.site.siteMetadata.author,\n              },\n              {\n                name: `twitter:title`,\n                content: title,\n              },\n              {\n                name: `twitter:description`,\n                content: metaDescription,\n              },\n            ]\n              .concat(\n                keywords.length > 0\n                  ? {\n                      name: `keywords`,\n                      content: keywords.join(`, `),\n                    }\n                  : []\n              )\n              .concat(meta)}\n          />\n        )\n      }}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n\nconst detailsQuery = graphql`\n  query DefaultSEOQuery {\n    site {\n      siteMetadata {\n        title\n        description\n        author\n      }\n    }\n  }\n`\n"],"sourceRoot":""}